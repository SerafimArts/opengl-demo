<?php

namespace Bic\Lib;

use Bic\Lib\SDL2\Platform;
use FFI\CData;
use Psr\SimpleCache\CacheInterface;

/**
 * @method void SDL_SetMainReady()
 * @method int SDL_RegisterApp(string $name, int $style, CData $hInst)
 * @method void SDL_UnregisterApp()
 * @method int SDL_ReportAssertion(CData $a, string $b, string $c, int $d)
 * @method void SDL_SetAssertionHandler(callable $handler, CData $userdata)
 * @method callable SDL_GetDefaultAssertionHandler()
 * @method callable SDL_GetAssertionHandler(CData $puserdata)
 * @method CData SDL_GetAssertionReport()
 * @method void SDL_ResetAssertionReport()
 * @method string SDL_GetPlatform ()
 * @method int SDL_AtomicTryLock(CData $lock)
 * @method void SDL_AtomicLock(CData $lock)
 * @method void SDL_AtomicUnlock(CData $lock)
 * @method void SDL_MemoryBarrierReleaseFunction()
 * @method void SDL_MemoryBarrierAcquireFunction()
 * @method int SDL_AtomicCAS(CData $a, int $oldval, int $newval)
 * @method int SDL_AtomicSet(CData $a, int $v)
 * @method int SDL_AtomicGet(CData $a)
 * @method int SDL_AtomicAdd(CData $a, int $v)
 * @method int SDL_AtomicCASPtr(CData $a, CData $oldval, CData $newval)
 * @method CData SDL_AtomicSetPtr(CData $a, CData $v)
 * @method CData SDL_AtomicGetPtr(CData $a)
 * @method int SDL_SetError(string ...$fmt)
 * @method string SDL_GetError()
 * @method CData|string SDL_GetErrorMsg(CData|string $errstr, int $maxlen)
 * @method void SDL_ClearError()
 * @method int SDL_Error(int $code)
 * @method CData SDL_CreateMutex()
 * @method int SDL_LockMutex(CData $mutex)
 * @method int SDL_TryLockMutex(CData $mutex)
 * @method int SDL_UnlockMutex(CData $mutex)
 * @method void SDL_DestroyMutex(CData $mutex)
 * @method CData SDL_CreateSemaphore(int $initial_value)
 * @method void SDL_DestroySemaphore(CData $sem)
 * @method int SDL_SemWait(CData $sem)
 * @method int SDL_SemTryWait(CData $sem)
 * @method int SDL_SemWaitTimeout(CData $sem, int $ms)
 * @method int SDL_SemPost(CData $sem)
 * @method int SDL_SemValue(CData $sem)
 * @method CData SDL_CreateCond()
 * @method void SDL_DestroyCond(CData $cond)
 * @method int SDL_CondSignal(CData $cond)
 * @method int SDL_CondBroadcast(CData $cond)
 * @method int SDL_CondWait(CData $cond, CData $mutex)
 * @method int SDL_CondWaitTimeout(CData $cond, CData $mutex, int $ms)
 * @method CData SDL_CreateThread(callable $fn, string $name, CData $data, callable $pfnBeginThread, callable $pfnEndThread)
 * @method CData SDL_CreateThreadWithStackSize(callable $fn, string $name, int $stacksize, CData $data, callable $pfnBeginThread, callable $pfnEndThread)
 * @method string SDL_GetThreadName(CData $thread)
 * @method int SDL_ThreadID()
 * @method int SDL_GetThreadID(CData $thread)
 * @method int SDL_SetThreadPriority(int $priority)
 * @method void SDL_WaitThread(CData $thread, CData $status)
 * @method void SDL_DetachThread(CData $thread)
 * @method int SDL_TLSCreate()
 * @method CData SDL_TLSGet(int $id)
 * @method int SDL_TLSSet(int $id, CData $value, callable $destructor)
 * @method void SDL_TLSCleanup()
 * @method CData SDL_RWFromFile(string $file, string $mode)
 * @method CData SDL_RWFromFP(CData $fp, int $autoclose)
 * @method CData SDL_RWFromMem(CData $mem, int $size)
 * @method CData SDL_RWFromConstMem(CData $mem, int $size)
 * @method CData SDL_AllocRW()
 * @method void SDL_FreeRW(CData $area)
 * @method int SDL_RWsize(CData $context)
 * @method int SDL_RWseek(CData $context, int $offset, int $whence)
 * @method int SDL_RWtell(CData $context)
 * @method int SDL_RWread(CData $context, CData $ptr, int $size, int $maxnum)
 * @method int SDL_RWwrite(CData $context, CData $ptr, int $size, int $num)
 * @method int SDL_RWclose(CData $context)
 * @method CData SDL_LoadFile_RW(CData $app, CData $datasize, int $freesrc)
 * @method CData SDL_LoadFile(string $file, CData $datasize)
 * @method int SDL_ReadU8(CData $app)
 * @method int SDL_ReadLE16(CData $app)
 * @method int SDL_ReadBE16(CData $app)
 * @method int SDL_ReadLE32(CData $app)
 * @method int SDL_ReadBE32(CData $app)
 * @method int SDL_ReadLE64(CData $app)
 * @method int SDL_ReadBE64(CData $app)
 * @method int SDL_WriteU8(CData $dst, int $value)
 * @method int SDL_WriteLE16(CData $dst, int $value)
 * @method int SDL_WriteBE16(CData $dst, int $value)
 * @method int SDL_WriteLE32(CData $dst, int $value)
 * @method int SDL_WriteBE32(CData $dst, int $value)
 * @method int SDL_WriteLE64(CData $dst, int $value)
 * @method int SDL_WriteBE64(CData $dst, int $value)
 * @method int SDL_GetNumAudioDrivers()
 * @method string SDL_GetAudioDriver(int $index)
 * @method int SDL_AudioInit(string $driver_name)
 * @method void SDL_AudioQuit()
 * @method string SDL_GetCurrentAudioDriver()
 * @method int SDL_OpenAudio(CData $desired, CData $obtained)
 * @method int SDL_GetNumAudioDevices(int $iscapture)
 * @method string SDL_GetAudioDeviceName(int $index, int $iscapture)
 * @method int SDL_GetAudioDeviceSpec(int $index, int $iscapture, CData $spec)
 * @method int SDL_GetDefaultAudioInfo(CData $name, CData $spec, int $iscapture)
 * @method int SDL_OpenAudioDevice(string $device, int $iscapture, CData $desired, CData $obtained, int $allowed_changes)
 * @method int SDL_GetAudioStatus()
 * @method int SDL_GetAudioDeviceStatus(int $dev)
 * @method void SDL_PauseAudio(int $pause_on)
 * @method void SDL_PauseAudioDevice(int $dev, int $pause_on)
 * @method CData SDL_LoadWAV_RW(CData $app, int $freesrc, CData $spec, CData $audio_buf, CData $audio_len)
 * @method void SDL_FreeWAV(CData $audio_buf)
 * @method int SDL_BuildAudioCVT(CData $cvt, int $src_format, int $src_channels, int $src_rate, int $dst_format, int $dst_channels, int $dst_rate)
 * @method int SDL_ConvertAudio(CData $cvt)
 * @method CData SDL_NewAudioStream(int $src_format, int $src_channels, int $src_rate, int $dst_format, int $dst_channels, int $dst_rate)
 * @method int SDL_AudioStreamPut(CData $stream, CData $buf, int $len)
 * @method int SDL_AudioStreamGet(CData $stream, CData $buf, int $len)
 * @method int SDL_AudioStreamAvailable(CData $stream)
 * @method int SDL_AudioStreamFlush(CData $stream)
 * @method void SDL_AudioStreamClear(CData $stream)
 * @method void SDL_FreeAudioStream(CData $stream)
 * @method void SDL_MixAudio(CData $dst, CData $app, int $len, int $volume)
 * @method void SDL_MixAudioFormat(CData $dst, CData $app, int $format, int $len, int $volume)
 * @method int SDL_QueueAudio(int $dev, CData $data, int $len)
 * @method int SDL_DequeueAudio(int $dev, CData $data, int $len)
 * @method int SDL_GetQueuedAudioSize(int $dev)
 * @method void SDL_ClearQueuedAudio(int $dev)
 * @method void SDL_LockAudio()
 * @method void SDL_LockAudioDevice(int $dev)
 * @method void SDL_UnlockAudio()
 * @method void SDL_UnlockAudioDevice(int $dev)
 * @method void SDL_CloseAudio()
 * @method void SDL_CloseAudioDevice(int $dev)
 * @method int SDL_SetClipboardText(string $text)
 * @method CData|int SDL_GetClipboardText()
 * @method int SDL_HasClipboardText()
 * @method int SDL_GetCPUCount()
 * @method int SDL_GetCPUCacheLineSize()
 * @method int SDL_HasRDTSC()
 * @method int SDL_HasAltiVec()
 * @method int SDL_HasMMX()
 * @method int SDL_Has3DNow()
 * @method int SDL_HasSSE()
 * @method int SDL_HasSSE2()
 * @method int SDL_HasSSE3()
 * @method int SDL_HasSSE41()
 * @method int SDL_HasSSE42()
 * @method int SDL_HasAVX()
 * @method int SDL_HasAVX2()
 * @method int SDL_HasAVX512F()
 * @method int SDL_HasARMSIMD()
 * @method int SDL_HasNEON()
 * @method int SDL_HasLSX()
 * @method int SDL_HasLASX()
 * @method int SDL_GetSystemRAM()
 * @method int SDL_SIMDGetAlignment()
 * @method CData SDL_SIMDAlloc(int $len)
 * @method CData SDL_SIMDRealloc(CData $mem, int $len)
 * @method void SDL_SIMDFree(CData $ptr)
 * @method string SDL_GetPixelFormatName(int $format)
 * @method int SDL_PixelFormatEnumToMasks(int $format, CData $bpp, CData $Rmask, CData $Gmask, CData $Bmask, CData $Amask)
 * @method int SDL_MasksToPixelFormatEnum(int $bpp, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method CData SDL_AllocFormat(int $pixel_format)
 * @method void SDL_FreeFormat(CData $format)
 * @method CData SDL_AllocPalette(int $ncolors)
 * @method int SDL_SetPixelFormatPalette(CData $format, CData $palette)
 * @method int SDL_SetPaletteColors(CData $palette, CData $colors, int $firstcolor, int $ncolors)
 * @method void SDL_FreePalette(CData $palette)
 * @method int SDL_MapRGB(CData $format, int $r, int $g, int $b)
 * @method int SDL_MapRGBA(CData $format, int $r, int $g, int $b, int $a)
 * @method void SDL_GetRGB(int $pixel, CData $format, CData $r, CData $g, CData $b)
 * @method void SDL_GetRGBA(int $pixel, CData $format, CData $r, CData $g, CData $b, CData $a)
 * @method void SDL_CalculateGammaRamp(float $gamma, CData $ramp)
 * @method int SDL_HasIntersection(CData $A, CData $B)
 * @method int SDL_IntersectRect(CData $A, CData $B, CData $result)
 * @method void SDL_UnionRect(CData $A, CData $B, CData $result)
 * @method int SDL_EnclosePoints(CData $points, int $count, CData $clip, CData $result)
 * @method int SDL_IntersectRectAndLine(CData $rect, CData $X1, CData $Y1, CData $X2, CData $Y2)
 * @method int SDL_HasIntersectionF(CData $A, CData $B)
 * @method int SDL_IntersectFRect(CData $A, CData $B, CData $result)
 * @method void SDL_UnionFRect(CData $A, CData $B, CData $result)
 * @method int SDL_EncloseFPoints(CData $points, int $count, CData $clip, CData $result)
 * @method int SDL_IntersectFRectAndLine(CData $rect, CData $X1, CData $Y1, CData $X2, CData $Y2)
 * @method int SDL_ComposeCustomBlendMode(int $srcColorFactor, int $dstColorFactor, int $colorOperation, int $srcAlphaFactor, int $dstAlphaFactor, int $alphaOperation)
 * @method CData SDL_CreateRGBSurface(int $flags, int $width, int $height, int $depth, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method CData SDL_CreateRGBSurfaceWithFormat(int $flags, int $width, int $height, int $depth, int $format)
 * @method CData SDL_CreateRGBSurfaceFrom(CData $pixels, int $width, int $height, int $depth, int $pitch, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method CData SDL_CreateRGBSurfaceWithFormatFrom(CData $pixels, int $width, int $height, int $depth, int $pitch, int $format)
 * @method void SDL_FreeSurface(CData $surface)
 * @method int SDL_SetSurfacePalette(CData $surface, CData $palette)
 * @method int SDL_LockSurface(CData $surface)
 * @method void SDL_UnlockSurface(CData $surface)
 * @method CData SDL_LoadBMP_RW(CData $app, int $freesrc)
 * @method int SDL_SaveBMP_RW(CData $surface, CData $dst, int $freedst)
 * @method int SDL_SetSurfaceRLE(CData $surface, int $flag)
 * @method int SDL_HasSurfaceRLE(CData $surface)
 * @method int SDL_SetColorKey(CData $surface, int $flag, int $key)
 * @method int SDL_HasColorKey(CData $surface)
 * @method int SDL_GetColorKey(CData $surface, CData $key)
 * @method int SDL_SetSurfaceColorMod(CData $surface, int $r, int $g, int $b)
 * @method int SDL_GetSurfaceColorMod(CData $surface, CData $r, CData $g, CData $b)
 * @method int SDL_SetSurfaceAlphaMod(CData $surface, int $alpha)
 * @method int SDL_GetSurfaceAlphaMod(CData $surface, CData $alpha)
 * @method int SDL_SetSurfaceBlendMode(CData $surface, int $blendMode)
 * @method int SDL_GetSurfaceBlendMode(CData $surface, CData $blendMode)
 * @method int SDL_SetClipRect(CData $surface, CData $rect)
 * @method void SDL_GetClipRect(CData $surface, CData $rect)
 * @method CData SDL_DuplicateSurface(CData $surface)
 * @method CData SDL_ConvertSurface(CData $app, CData $fmt, int $flags)
 * @method CData SDL_ConvertSurfaceFormat(CData $app, int $pixel_format, int $flags)
 * @method int SDL_ConvertPixels(int $width, int $height, int $src_format, CData $app, int $src_pitch, int $dst_format, CData $dst, int $dst_pitch)
 * @method int SDL_PremultiplyAlpha(int $width, int $height, int $src_format, CData $app, int $src_pitch, int $dst_format, CData $dst, int $dst_pitch)
 * @method int SDL_FillRect(CData $dst, CData $rect, int $color)
 * @method int SDL_FillRects(CData $dst, CData $rects, int $count, int $color)
 * @method int SDL_UpperBlit(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method int SDL_LowerBlit(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method int SDL_SoftStretch(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method int SDL_SoftStretchLinear(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method int SDL_UpperBlitScaled(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method int SDL_LowerBlitScaled(CData $app, CData $srcrect, CData $dst, CData $dstrect)
 * @method void SDL_SetYUVConversionMode(int $mode)
 * @method int SDL_GetYUVConversionMode()
 * @method int SDL_GetYUVConversionModeForResolution(int $width, int $height)
 * @method int SDL_GetNumVideoDrivers()
 * @method string SDL_GetVideoDriver(int $index)
 * @method int SDL_VideoInit(string $driver_name)
 * @method void SDL_VideoQuit()
 * @method string SDL_GetCurrentVideoDriver()
 * @method int SDL_GetNumVideoDisplays()
 * @method string SDL_GetDisplayName(int $displayIndex)
 * @method int SDL_GetDisplayBounds(int $displayIndex, CData $rect)
 * @method int SDL_GetDisplayUsableBounds(int $displayIndex, CData $rect)
 * @method int SDL_GetDisplayDPI(int $displayIndex, CData $ddpi, CData $hdpi, CData $vdpi)
 * @method int SDL_GetDisplayOrientation(int $displayIndex)
 * @method int SDL_GetNumDisplayModes(int $displayIndex)
 * @method int SDL_GetDisplayMode(int $displayIndex, int $modeIndex, CData $mode)
 * @method int SDL_GetDesktopDisplayMode(int $displayIndex, CData $mode)
 * @method int SDL_GetCurrentDisplayMode(int $displayIndex, CData $mode)
 * @method CData SDL_GetClosestDisplayMode(int $displayIndex, CData $mode, CData $closest)
 * @method int SDL_GetPointDisplayIndex(CData $point)
 * @method int SDL_GetRectDisplayIndex(CData $rect)
 * @method int SDL_GetWindowDisplayIndex(CData $window)
 * @method int SDL_SetWindowDisplayMode(CData $window, CData $mode)
 * @method int SDL_GetWindowDisplayMode(CData $window, CData $mode)
 * @method CData SDL_GetWindowICCProfile(CData $window, CData $size)
 * @method int SDL_GetWindowPixelFormat(CData $window)
 * @method CData SDL_CreateWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method CData SDL_CreateWindowFrom(CData $data)
 * @method int SDL_GetWindowID(CData $window)
 * @method CData SDL_GetWindowFromID(int $id)
 * @method int SDL_GetWindowFlags(CData $window)
 * @method void SDL_SetWindowTitle(CData $window, string $title)
 * @method string SDL_GetWindowTitle(CData $window)
 * @method void SDL_SetWindowIcon(CData $window, CData $icon)
 * @method CData SDL_SetWindowData(CData $window, string $name, CData $userdata)
 * @method CData SDL_GetWindowData(CData $window, string $name)
 * @method void SDL_SetWindowPosition(CData $window, int $x, int $y)
 * @method void SDL_GetWindowPosition(CData $window, CData $x, CData $y)
 * @method void SDL_SetWindowSize(CData $window, int $w, int $h)
 * @method void SDL_GetWindowSize(CData $window, CData $w, CData $h)
 * @method int SDL_GetWindowBordersSize(CData $window, CData $top, CData $left, CData $bottom, CData $right)
 * @method void SDL_SetWindowMinimumSize(CData $window, int $min_w, int $min_h)
 * @method void SDL_GetWindowMinimumSize(CData $window, CData $w, CData $h)
 * @method void SDL_SetWindowMaximumSize(CData $window, int $max_w, int $max_h)
 * @method void SDL_GetWindowMaximumSize(CData $window, CData $w, CData $h)
 * @method void SDL_SetWindowBordered(CData $window, int $bordered)
 * @method void SDL_SetWindowResizable(CData $window, int $resizable)
 * @method void SDL_SetWindowAlwaysOnTop(CData $window, int $on_top)
 * @method void SDL_ShowWindow(CData $window)
 * @method void SDL_HideWindow(CData $window)
 * @method void SDL_RaiseWindow(CData $window)
 * @method void SDL_MaximizeWindow(CData $window)
 * @method void SDL_MinimizeWindow(CData $window)
 * @method void SDL_RestoreWindow(CData $window)
 * @method int SDL_SetWindowFullscreen(CData $window, int $flags)
 * @method CData SDL_GetWindowSurface(CData $window)
 * @method int SDL_UpdateWindowSurface(CData $window)
 * @method int SDL_UpdateWindowSurfaceRects(CData $window, CData $rects, int $numrects)
 * @method void SDL_SetWindowGrab(CData $window, int $grabbed)
 * @method void SDL_SetWindowKeyboardGrab(CData $window, int $grabbed)
 * @method void SDL_SetWindowMouseGrab(CData $window, int $grabbed)
 * @method int SDL_GetWindowGrab(CData $window)
 * @method int SDL_GetWindowKeyboardGrab(CData $window)
 * @method int SDL_GetWindowMouseGrab(CData $window)
 * @method CData SDL_GetGrabbedWindow()
 * @method int SDL_SetWindowMouseRect(CData $window, CData $rect)
 * @method CData SDL_GetWindowMouseRect(CData $window)
 * @method int SDL_SetWindowBrightness(CData $window, float $brightness)
 * @method float SDL_GetWindowBrightness(CData $window)
 * @method int SDL_SetWindowOpacity(CData $window, float $opacity)
 * @method int SDL_GetWindowOpacity(CData $window, CData $out_opacity)
 * @method int SDL_SetWindowModalFor(CData $modal_window, CData $parent_window)
 * @method int SDL_SetWindowInputFocus(CData $window)
 * @method int SDL_SetWindowGammaRamp(CData $window, CData $red, CData $green, CData $blue)
 * @method int SDL_GetWindowGammaRamp(CData $window, CData $red, CData $green, CData $blue)
 * @method int SDL_SetWindowHitTest(CData $window, callable $callback, CData $callback_data)
 * @method int SDL_FlashWindow(CData $window, int $operation)
 * @method void SDL_DestroyWindow(CData $window)
 * @method int SDL_IsScreenSaverEnabled()
 * @method void SDL_EnableScreenSaver()
 * @method void SDL_DisableScreenSaver()
 * @method int SDL_GL_LoadLibrary(string $path)
 * @method CData SDL_GL_GetProcAddress(string $proc)
 * @method void SDL_GL_UnloadLibrary()
 * @method int SDL_GL_ExtensionSupported(int|string $extension)
 * @method void SDL_GL_ResetAttributes()
 * @method int SDL_GL_SetAttribute(int $attr, int $value)
 * @method int SDL_GL_GetAttribute(int $attr, CData $value)
 * @method CData SDL_GL_CreateContext(CData $window)
 * @method int SDL_GL_MakeCurrent(CData $window, CData $context)
 * @method CData SDL_GL_GetCurrentWindow()
 * @method CData SDL_GL_GetCurrentContext()
 * @method void SDL_GL_GetDrawableSize(CData $window, CData $w, CData $h)
 * @method int SDL_GL_SetSwapInterval(int $interval)
 * @method int SDL_GL_GetSwapInterval()
 * @method void SDL_GL_SwapWindow(CData $window)
 * @method void SDL_GL_DeleteContext(CData $context)
 * @method CData SDL_GetKeyboardFocus()
 * @method CData SDL_GetKeyboardState(CData $numkeys)
 * @method void SDL_ResetKeyboard()
 * @method int SDL_GetModState()
 * @method void SDL_SetModState(int $modstate)
 * @method int SDL_GetKeyFromScancode(int $scancode)
 * @method int SDL_GetScancodeFromKey(int $key)
 * @method string SDL_GetScancodeName(int $scancode)
 * @method int SDL_GetScancodeFromName(string $name)
 * @method string SDL_GetKeyName(int $key)
 * @method int SDL_GetKeyFromName(string $name)
 * @method void SDL_StartTextInput()
 * @method int SDL_IsTextInputActive()
 * @method void SDL_StopTextInput()
 * @method void SDL_ClearComposition()
 * @method int SDL_IsTextInputShown()
 * @method void SDL_SetTextInputRect(CData $rect)
 * @method int SDL_HasScreenKeyboardSupport()
 * @method int SDL_IsScreenKeyboardShown(CData $window)
 * @method CData SDL_GetMouseFocus()
 * @method int SDL_GetMouseState(CData $x, CData $y)
 * @method int SDL_GetGlobalMouseState(CData $x, CData $y)
 * @method int SDL_GetRelativeMouseState(CData $x, CData $y)
 * @method void SDL_WarpMouseInWindow(CData $window, int $x, int $y)
 * @method int SDL_WarpMouseGlobal(int $x, int $y)
 * @method int SDL_SetRelativeMouseMode(int $enabled)
 * @method int SDL_CaptureMouse(int $enabled)
 * @method int SDL_GetRelativeMouseMode()
 * @method CData SDL_CreateCursor(CData $data, CData $mask, int $w, int $h, int $hot_x, int $hot_y)
 * @method CData SDL_CreateColorCursor(CData $surface, int $hot_x, int $hot_y)
 * @method CData SDL_CreateSystemCursor(int $id)
 * @method void SDL_SetCursor(CData $cursor)
 * @method CData SDL_GetCursor()
 * @method CData SDL_GetDefaultCursor()
 * @method void SDL_FreeCursor(CData $cursor)
 * @method int SDL_ShowCursor(int $toggle)
 * @method void SDL_GUIDToString(CData $guid, string|int|CData $pszGUID, int $cbGUID)
 * @method CData SDL_GUIDFromString(string $pchGUID)
 * @method void SDL_LockJoysticks()
 * @method void SDL_UnlockJoysticks()
 * @method int SDL_NumJoysticks()
 * @method string SDL_JoystickNameForIndex(int $device_index)
 * @method string SDL_JoystickPathForIndex(int $device_index)
 * @method int SDL_JoystickGetDevicePlayerIndex(int $device_index)
 * @method CData SDL_JoystickGetDeviceGUID(int $device_index)
 * @method int SDL_JoystickGetDeviceVendor(int $device_index)
 * @method int SDL_JoystickGetDeviceProduct(int $device_index)
 * @method int SDL_JoystickGetDeviceProductVersion(int $device_index)
 * @method int SDL_JoystickGetDeviceType(int $device_index)
 * @method CData SDL_JoystickGetDeviceInstanceID(int $device_index)
 * @method CData SDL_JoystickOpen(int $device_index)
 * @method CData SDL_JoystickFromInstanceID(CData $instance_id)
 * @method CData SDL_JoystickFromPlayerIndex(int $player_index)
 * @method int SDL_JoystickAttachVirtual(int $type, int $naxes, int $nbuttons, int $nhats)
 * @method int SDL_JoystickAttachVirtualEx(CData $desc)
 * @method int SDL_JoystickDetachVirtual(int $device_index)
 * @method int SDL_JoystickIsVirtual(int $device_index)
 * @method int SDL_JoystickSetVirtualAxis(CData $joystick, int $axis, int $value)
 * @method int SDL_JoystickSetVirtualButton(CData $joystick, int $button, int $value)
 * @method int SDL_JoystickSetVirtualHat(CData $joystick, int $hat, int $value)
 * @method string SDL_JoystickName(CData $joystick)
 * @method string SDL_JoystickPath(CData $joystick)
 * @method int SDL_JoystickGetPlayerIndex(CData $joystick)
 * @method void SDL_JoystickSetPlayerIndex(CData $joystick, int $player_index)
 * @method CData SDL_JoystickGetGUID(CData $joystick)
 * @method int SDL_JoystickGetVendor(CData $joystick)
 * @method int SDL_JoystickGetProduct(CData $joystick)
 * @method int SDL_JoystickGetProductVersion(CData $joystick)
 * @method int SDL_JoystickGetFirmwareVersion(CData $joystick)
 * @method string SDL_JoystickGetSerial(CData $joystick)
 * @method int SDL_JoystickGetType(CData $joystick)
 * @method void SDL_JoystickGetGUIDString(CData $guid, int|string|CData $pszGUID, int $cbGUID)
 * @method CData SDL_JoystickGetGUIDFromString(string $pchGUID)
 * @method int SDL_JoystickGetAttached(CData $joystick)
 * @method int SDL_JoystickInstanceID(CData $joystick)
 * @method int SDL_JoystickNumAxes(CData $joystick)
 * @method int SDL_JoystickNumBalls(CData $joystick)
 * @method int SDL_JoystickNumHats(CData $joystick)
 * @method int SDL_JoystickNumButtons(CData $joystick)
 * @method void SDL_JoystickUpdate()
 * @method int SDL_JoystickEventState(int $state)
 * @method int SDL_JoystickGetAxis(CData $joystick, int $axis)
 * @method int SDL_JoystickGetAxisInitialState(CData $joystick, int $axis, CData $state)
 * @method int SDL_JoystickGetHat(CData $joystick, int $hat)
 * @method int SDL_JoystickGetBall(CData $joystick, int $ball, CData $dx, CData $dy)
 * @method int SDL_JoystickGetButton(CData $joystick, int $button)
 * @method int SDL_JoystickRumble(CData $joystick, int $low_frequency_rumble, int $high_frequency_rumble, int $duration_ms)
 * @method int SDL_JoystickRumbleTriggers(CData $joystick, int $left_rumble, int $right_rumble, int $duration_ms)
 * @method int SDL_JoystickHasLED(CData $joystick)
 * @method int SDL_JoystickHasRumble(CData $joystick)
 * @method int SDL_JoystickHasRumbleTriggers(CData $joystick)
 * @method int SDL_JoystickSetLED(CData $joystick, int $red, int $green, int $blue)
 * @method int SDL_JoystickSendEffect(CData $joystick, CData $data, int $size)
 * @method void SDL_JoystickClose(CData $joystick)
 * @method int SDL_JoystickCurrentPowerLevel(CData $joystick)
 * @method void SDL_LockSensors()
 * @method void SDL_UnlockSensors()
 * @method int SDL_NumSensors()
 * @method string SDL_SensorGetDeviceName(int $device_index)
 * @method int SDL_SensorGetDeviceType(int $device_index)
 * @method int SDL_SensorGetDeviceNonPortableType(int $device_index)
 * @method int SDL_SensorGetDeviceInstanceID(int $device_index)
 * @method CData SDL_SensorOpen(int $device_index)
 * @method CData SDL_SensorFromInstanceID(int $instance_id)
 * @method string SDL_SensorGetName(CData $sensor)
 * @method int SDL_SensorGetType(CData $sensor)
 * @method int SDL_SensorGetNonPortableType(CData $sensor)
 * @method int SDL_SensorGetInstanceID(CData $sensor)
 * @method int SDL_SensorGetData(CData $sensor, CData $data, int $num_values)
 * @method void SDL_SensorClose(CData $sensor)
 * @method void SDL_SensorUpdate()
 * @method int SDL_GameControllerAddMappingsFromRW(CData $rw, int $freerw)
 * @method int SDL_GameControllerAddMapping(string $mappingString)
 * @method int SDL_GameControllerNumMappings()
 * @method CData|int SDL_GameControllerMappingForIndex(int $mapping_index)
 * @method CData|int SDL_GameControllerMappingForGUID(CData $guid)
 * @method CData|int SDL_GameControllerMapping(CData $gamecontroller)
 * @method int SDL_IsGameController(int $joystick_index)
 * @method string SDL_GameControllerNameForIndex(int $joystick_index)
 * @method string SDL_GameControllerPathForIndex(int $joystick_index)
 * @method int SDL_GameControllerTypeForIndex(int $joystick_index)
 * @method CData|int SDL_GameControllerMappingForDeviceIndex(int $joystick_index)
 * @method CData SDL_GameControllerOpen(int $joystick_index)
 * @method CData SDL_GameControllerFromInstanceID(int $joyid)
 * @method CData SDL_GameControllerFromPlayerIndex(int $player_index)
 * @method string SDL_GameControllerName(CData $gamecontroller)
 * @method string SDL_GameControllerPath(CData $gamecontroller)
 * @method int SDL_GameControllerGetType(CData $gamecontroller)
 * @method int SDL_GameControllerGetPlayerIndex(CData $gamecontroller)
 * @method void SDL_GameControllerSetPlayerIndex(CData $gamecontroller, int $player_index)
 * @method int SDL_GameControllerGetVendor(CData $gamecontroller)
 * @method int SDL_GameControllerGetProduct(CData $gamecontroller)
 * @method int SDL_GameControllerGetProductVersion(CData $gamecontroller)
 * @method int SDL_GameControllerGetFirmwareVersion(CData $gamecontroller)
 * @method string SDL_GameControllerGetSerial(CData $gamecontroller)
 * @method int SDL_GameControllerGetAttached(CData $gamecontroller)
 * @method CData SDL_GameControllerGetJoystick(CData $gamecontroller)
 * @method int SDL_GameControllerEventState(int $state)
 * @method void SDL_GameControllerUpdate()
 * @method int SDL_GameControllerGetAxisFromString(string $str)
 * @method string SDL_GameControllerGetStringForAxis(int $axis)
 * @method CData SDL_GameControllerGetBindForAxis(CData $gamecontroller, int $axis)
 * @method int SDL_GameControllerHasAxis(CData $gamecontroller, int $axis)
 * @method int SDL_GameControllerGetAxis(CData $gamecontroller, int $axis)
 * @method int SDL_GameControllerGetButtonFromString(string $str)
 * @method string SDL_GameControllerGetStringForButton(int $button)
 * @method CData SDL_GameControllerGetBindForButton(CData $gamecontroller, int $button)
 * @method int SDL_GameControllerHasButton(CData $gamecontroller, int $button)
 * @method int SDL_GameControllerGetButton(CData $gamecontroller, int $button)
 * @method int SDL_GameControllerGetNumTouchpads(CData $gamecontroller)
 * @method int SDL_GameControllerGetNumTouchpadFingers(CData $gamecontroller, int $touchpad)
 * @method int SDL_GameControllerGetTouchpadFinger(CData $gamecontroller, int $touchpad, int $finger, CData $state, CData $x, CData $y, CData $pressure)
 * @method int SDL_GameControllerHasSensor(CData $gamecontroller, int $type)
 * @method int SDL_GameControllerSetSensorEnabled(CData $gamecontroller, int $type, int $enabled)
 * @method int SDL_GameControllerIsSensorEnabled(CData $gamecontroller, int $type)
 * @method float SDL_GameControllerGetSensorDataRate(CData $gamecontroller, int $type)
 * @method int SDL_GameControllerGetSensorData(CData $gamecontroller, int $type, CData $data, int $num_values)
 * @method int SDL_GameControllerRumble(CData $gamecontroller, int $low_frequency_rumble, int $high_frequency_rumble, int $duration_ms)
 * @method int SDL_GameControllerRumbleTriggers(CData $gamecontroller, int $left_rumble, int $right_rumble, int $duration_ms)
 * @method int SDL_GameControllerHasLED(CData $gamecontroller)
 * @method int SDL_GameControllerHasRumble(CData $gamecontroller)
 * @method int SDL_GameControllerHasRumbleTriggers(CData $gamecontroller)
 * @method int SDL_GameControllerSetLED(CData $gamecontroller, int $red, int $green, int $blue)
 * @method int SDL_GameControllerSendEffect(CData $gamecontroller, CData $data, int $size)
 * @method void SDL_GameControllerClose(CData $gamecontroller)
 * @method string SDL_GameControllerGetAppleSFSymbolsNameForButton(CData $gamecontroller, int $button)
 * @method string SDL_GameControllerGetAppleSFSymbolsNameForAxis(CData $gamecontroller, int $axis)
 * @method int SDL_GetNumTouchDevices()
 * @method int SDL_GetTouchDevice(int $index)
 * @method string SDL_GetTouchName(int $index)
 * @method int SDL_GetTouchDeviceType(int $touchID)
 * @method int SDL_GetNumTouchFingers(int $touchID)
 * @method CData SDL_GetTouchFinger(int $touchID, int $index)
 * @method int SDL_RecordGesture(int $touchId)
 * @method int SDL_SaveAllDollarTemplates(CData $dst)
 * @method int SDL_SaveDollarTemplate(int $gestureId, CData $dst)
 * @method int SDL_LoadDollarTemplates(int $touchId, CData $app)
 * @method void SDL_PumpEvents()
 * @method int SDL_PeepEvents(CData $events, int $numevents, int $action, int $minType, int $maxType)
 * @method int SDL_HasEvent(int $type)
 * @method int SDL_HasEvents(int $minType, int $maxType)
 * @method void SDL_FlushEvent(int $type)
 * @method void SDL_FlushEvents(int $minType, int $maxType)
 * @method int SDL_PollEvent(CData $event)
 * @method int SDL_WaitEvent(CData $event)
 * @method int SDL_WaitEventTimeout(CData $event, int $timeout)
 * @method int SDL_PushEvent(CData $event)
 * @method void SDL_SetEventFilter(callable $filter, CData $userdata)
 * @method int SDL_GetEventFilter(CData $filter, CData $userdata)
 * @method void SDL_AddEventWatch(callable $filter, CData $userdata)
 * @method void SDL_DelEventWatch(callable $filter, CData $userdata)
 * @method void SDL_FilterEvents(callable $filter, CData $userdata)
 * @method int SDL_EventState(int $type, int $state)
 * @method int SDL_RegisterEvents(int $numevents)
 * @method CData|int SDL_GetBasePath()
 * @method CData|int SDL_GetPrefPath(string $org, string $app)
 * @method int SDL_NumHaptics()
 * @method string SDL_HapticName(int $device_index)
 * @method CData SDL_HapticOpen(int $device_index)
 * @method int SDL_HapticOpened(int $device_index)
 * @method int SDL_HapticIndex(CData $haptic)
 * @method int SDL_MouseIsHaptic()
 * @method CData SDL_HapticOpenFromMouse()
 * @method int SDL_JoystickIsHaptic(CData $joystick)
 * @method CData SDL_HapticOpenFromJoystick(CData $joystick)
 * @method void SDL_HapticClose(CData $haptic)
 * @method int SDL_HapticNumEffects(CData $haptic)
 * @method int SDL_HapticNumEffectsPlaying(CData $haptic)
 * @method int SDL_HapticQuery(CData $haptic)
 * @method int SDL_HapticNumAxes(CData $haptic)
 * @method int SDL_HapticEffectSupported(CData $haptic, CData $effect)
 * @method int SDL_HapticNewEffect(CData $haptic, CData $effect)
 * @method int SDL_HapticUpdateEffect(CData $haptic, int $effect, CData $data)
 * @method int SDL_HapticRunEffect(CData $haptic, int $effect, int $iterations)
 * @method int SDL_HapticStopEffect(CData $haptic, int $effect)
 * @method void SDL_HapticDestroyEffect(CData $haptic, int $effect)
 * @method int SDL_HapticGetEffectStatus(CData $haptic, int $effect)
 * @method int SDL_HapticSetGain(CData $haptic, int $gain)
 * @method int SDL_HapticSetAutocenter(CData $haptic, int $autocenter)
 * @method int SDL_HapticPause(CData $haptic)
 * @method int SDL_HapticUnpause(CData $haptic)
 * @method int SDL_HapticStopAll(CData $haptic)
 * @method int SDL_HapticRumbleSupported(CData $haptic)
 * @method int SDL_HapticRumbleInit(CData $haptic)
 * @method int SDL_HapticRumblePlay(CData $haptic, float $strength, int $length )
 * @method int SDL_HapticRumbleStop(CData $haptic)
 * @method int SDL_hid_init()
 * @method int SDL_hid_exit()
 * @method int SDL_hid_device_change_count()
 * @method CData SDL_hid_enumerate(int $vendor_id, int $product_id)
 * @method void SDL_hid_free_enumeration(CData $devs)
 * @method CData SDL_hid_open(int $vendor_id, int $product_id, CData|string $serial_number)
 * @method CData SDL_hid_open_path(string $path, int $bExclusive)
 * @method int SDL_hid_write(CData $dev, CData|int $data, int $length)
 * @method int SDL_hid_read_timeout(CData $dev, CData|int $data, int $length, int $milliseconds)
 * @method int SDL_hid_read(CData $dev, CData|int $data, int $length)
 * @method int SDL_hid_set_nonblocking(CData $dev, int $nonblock)
 * @method int SDL_hid_send_feature_report(CData $dev, CData|int $data, int $length)
 * @method int SDL_hid_get_feature_report(CData $dev, CData|int $data, int $length)
 * @method void SDL_hid_close(CData $dev)
 * @method int SDL_hid_get_manufacturer_string(CData $dev, CData|string $string, int $maxlen)
 * @method int SDL_hid_get_product_string(CData $dev, CData|string $string, int $maxlen)
 * @method int SDL_hid_get_serial_number_string(CData $dev, CData|string $string, int $maxlen)
 * @method int SDL_hid_get_indexed_string(CData $dev, int $string_index, CData|string $string, int $maxlen)
 * @method void SDL_hid_ble_scan(int $active)
 * @method int SDL_SetHintWithPriority(string $name, string $value, int $priority)
 * @method int SDL_SetHint(string $name, string $value)
 * @method int SDL_ResetHint(string $name)
 * @method string SDL_GetHint(string $name)
 * @method int SDL_GetHintBoolean(string $name, int $default_value)
 * @method void SDL_AddHintCallback(string $name, callable $callback, CData $userdata)
 * @method void SDL_DelHintCallback(string $name, callable $callback, CData $userdata)
 * @method void SDL_ClearHints()
 * @method CData SDL_LoadObject(string $sofile)
 * @method CData SDL_LoadFunction(CData $handle, string $name)
 * @method void SDL_UnloadObject(CData $handle)
 * @method void SDL_LogSetAllPriority(int $priority)
 * @method void SDL_LogSetPriority(int $category, int $priority)
 * @method int SDL_LogGetPriority(int $category)
 * @method void SDL_LogResetPriorities()
 * @method void SDL_Log(string ...$fmt)
 * @method void SDL_LogVerbose(int $category, string ...$fmt)
 * @method void SDL_LogDebug(int $category, string ...$fmt)
 * @method void SDL_LogInfo(int $category, string ...$fmt)
 * @method void SDL_LogWarn(int $category, string ...$fmt)
 * @method void SDL_LogError(int $category, string ...$fmt)
 * @method void SDL_LogCritical(int $category, string ...$fmt)
 * @method void SDL_LogMessage(int $category, int $priority, string ...$fmt)
 * @method void SDL_LogMessageV(int $category, int $priority, string $fmt, int $ap)
 * @method void SDL_LogGetOutputFunction(CData $callback, CData $userdata)
 * @method void SDL_LogSetOutputFunction(callable $callback, CData $userdata)
 * @method int SDL_ShowMessageBox(CData $messageboxdata, CData $buttonid)
 * @method int SDL_ShowSimpleMessageBox(int $flags, string $title, string $message, CData $window)
 * @method CData SDL_Metal_CreateView(CData $window)
 * @method void SDL_Metal_DestroyView(CData $view)
 * @method CData SDL_Metal_GetLayer(CData $view)
 * @method void SDL_Metal_GetDrawableSize(CData $window, CData $w, CData $h)
 * @method int SDL_GetPowerInfo(CData $secs, CData $pct)
 * @method int SDL_GetNumRenderDrivers()
 * @method int SDL_GetRenderDriverInfo(int $index, CData $info)
 * @method int SDL_CreateWindowAndRenderer(int $width, int $height, int $window_flags, CData $window, CData $renderer)
 * @method CData SDL_CreateRenderer(CData $window, int $index, int $flags)
 * @method CData SDL_CreateSoftwareRenderer(CData $surface)
 * @method CData SDL_GetRenderer(CData $window)
 * @method CData SDL_RenderGetWindow(CData $renderer)
 * @method int SDL_GetRendererInfo(CData $renderer, CData $info)
 * @method int SDL_GetRendererOutputSize(CData $renderer, CData $w, CData $h)
 * @method CData SDL_CreateTexture(CData $renderer, int $format, int $access, int $w, int $h)
 * @method CData SDL_CreateTextureFromSurface(CData $renderer, CData $surface)
 * @method int SDL_QueryTexture(CData $texture, CData $format, CData $access, CData $w, CData $h)
 * @method int SDL_SetTextureColorMod(CData $texture, int $r, int $g, int $b)
 * @method int SDL_GetTextureColorMod(CData $texture, CData $r, CData $g, CData $b)
 * @method int SDL_SetTextureAlphaMod(CData $texture, int $alpha)
 * @method int SDL_GetTextureAlphaMod(CData $texture, CData $alpha)
 * @method int SDL_SetTextureBlendMode(CData $texture, int $blendMode)
 * @method int SDL_GetTextureBlendMode(CData $texture, CData $blendMode)
 * @method int SDL_SetTextureScaleMode(CData $texture, int $scaleMode)
 * @method int SDL_GetTextureScaleMode(CData $texture, CData $scaleMode)
 * @method int SDL_SetTextureUserData(CData $texture, CData $userdata)
 * @method CData SDL_GetTextureUserData(CData $texture)
 * @method int SDL_UpdateTexture(CData $texture, CData $rect, CData $pixels, int $pitch)
 * @method int SDL_UpdateYUVTexture(CData $texture, CData $rect, CData $Yplane, int $Ypitch, CData $Uplane, int $Upitch, CData $Vplane, int $Vpitch)
 * @method int SDL_UpdateNVTexture(CData $texture, CData $rect, CData $Yplane, int $Ypitch, CData $UVplane, int $UVpitch)
 * @method int SDL_LockTexture(CData $texture, CData $rect, CData $pixels, CData $pitch)
 * @method int SDL_LockTextureToSurface(CData $texture, CData $rect, CData $surface)
 * @method void SDL_UnlockTexture(CData $texture)
 * @method int SDL_RenderTargetSupported(CData $renderer)
 * @method int SDL_SetRenderTarget(CData $renderer, CData|null $texture)
 * @method CData SDL_GetRenderTarget(CData $renderer)
 * @method int SDL_RenderSetLogicalSize(CData $renderer, int $w, int $h)
 * @method void SDL_RenderGetLogicalSize(CData $renderer, CData $w, CData $h)
 * @method int SDL_RenderSetIntegerScale(CData $renderer, int $enable)
 * @method int SDL_RenderGetIntegerScale(CData $renderer)
 * @method int SDL_RenderSetViewport(CData $renderer, CData $rect)
 * @method void SDL_RenderGetViewport(CData $renderer, CData $rect)
 * @method int SDL_RenderSetClipRect(CData $renderer, CData $rect)
 * @method void SDL_RenderGetClipRect(CData $renderer, CData $rect)
 * @method int SDL_RenderIsClipEnabled(CData $renderer)
 * @method int SDL_RenderSetScale(CData $renderer, float $scaleX, float $scaleY)
 * @method void SDL_RenderGetScale(CData $renderer, CData $scaleX, CData $scaleY)
 * @method void SDL_RenderWindowToLogical(CData $renderer, int $windowX, int $windowY, CData $logicalX, CData $logicalY)
 * @method void SDL_RenderLogicalToWindow(CData $renderer, float $logicalX, float $logicalY, CData $windowX, CData $windowY)
 * @method int SDL_SetRenderDrawColor(CData $renderer, int $r, int $g, int $b, int $a)
 * @method int SDL_GetRenderDrawColor(CData $renderer, CData $r, CData $g, CData $b, CData $a)
 * @method int SDL_SetRenderDrawBlendMode(CData $renderer, int $blendMode)
 * @method int SDL_GetRenderDrawBlendMode(CData $renderer, CData $blendMode)
 * @method int SDL_RenderClear(CData $renderer)
 * @method int SDL_RenderDrawPoint(CData $renderer, int $x, int $y)
 * @method int SDL_RenderDrawPoints(CData $renderer, CData $points, int $count)
 * @method int SDL_RenderDrawLine(CData $renderer, int $x1, int $y1, int $x2, int $y2)
 * @method int SDL_RenderDrawLines(CData $renderer, CData $points, int $count)
 * @method int SDL_RenderDrawRect(CData $renderer, CData $rect)
 * @method int SDL_RenderDrawRects(CData $renderer, CData $rects, int $count)
 * @method int SDL_RenderFillRect(CData $renderer, CData $rect)
 * @method int SDL_RenderFillRects(CData $renderer, CData $rects, int $count)
 * @method int SDL_RenderCopy(CData $renderer, CData $texture, CData $srcrect, CData $dstrect)
 * @method int SDL_RenderCopyEx(CData $renderer, CData $texture, CData $srcrect, CData $dstrect, float $angle, CData $center, int $flip)
 * @method int SDL_RenderDrawPointF(CData $renderer, float $x, float $y)
 * @method int SDL_RenderDrawPointsF(CData $renderer, CData $points, int $count)
 * @method int SDL_RenderDrawLineF(CData $renderer, float $x1, float $y1, float $x2, float $y2)
 * @method int SDL_RenderDrawLinesF(CData $renderer, CData $points, int $count)
 * @method int SDL_RenderDrawRectF(CData $renderer, CData $rect)
 * @method int SDL_RenderDrawRectsF(CData $renderer, CData $rects, int $count)
 * @method int SDL_RenderFillRectF(CData $renderer, CData $rect)
 * @method int SDL_RenderFillRectsF(CData $renderer, CData $rects, int $count)
 * @method int SDL_RenderCopyF(CData $renderer, CData $texture, CData $srcrect, CData $dstrect)
 * @method int SDL_RenderCopyExF(CData $renderer, CData $texture, CData $srcrect, CData $dstrect, float $angle, CData $center, int $flip)
 * @method int SDL_RenderGeometry(CData $renderer, CData $texture, CData $vertices, int $num_vertices, CData $indices, int $num_indices)
 * @method int SDL_RenderGeometryRaw(CData $renderer, CData $texture, CData $xy, int $xy_stride, CData $color, int $color_stride, CData $uv, int $uv_stride, int $num_vertices, CData $indices, int $num_indices, int $size_indices)
 * @method int SDL_RenderReadPixels(CData $renderer, CData $rect, int $format, CData $pixels, int $pitch)
 * @method void SDL_RenderPresent(CData $renderer)
 * @method void SDL_DestroyTexture(CData $texture)
 * @method void SDL_DestroyRenderer(CData $renderer)
 * @method int SDL_RenderFlush(CData $renderer)
 * @method int SDL_GL_BindTexture(CData $texture, CData $texw, CData $texh)
 * @method int SDL_GL_UnbindTexture(CData $texture)
 * @method CData SDL_RenderGetMetalLayer(CData $renderer)
 * @method CData SDL_RenderGetMetalCommandEncoder(CData $renderer)
 * @method int SDL_RenderSetVSync(CData $renderer, int $vsync)
 * @method CData SDL_CreateShapedWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method int SDL_IsShapedWindow(CData $window)
 * @method int SDL_SetWindowShape(CData $window, CData $shape, CData $shape_mode)
 * @method int SDL_GetShapedWindowMode(CData $window, CData $shape_mode)
 * @method void SDL_SetWindowsMessageHook(CData $callback, CData $userdata)
 * @method int SDL_Direct3D9GetAdapterIndex(int $displayIndex )
 * @method CData SDL_RenderGetD3D9Device(CData $renderer)
 * @method CData SDL_RenderGetD3D11Device(CData $renderer)
 * @method CData SDL_RenderGetD3D12Device(CData $renderer)
 * @method int SDL_DXGIGetOutputInfo(int $displayIndex, CData $adapterIndex, CData $outputIndex )
 * @method int SDL_IsTablet()
 * @method void SDL_OnApplicationWillTerminate()
 * @method void SDL_OnApplicationDidReceiveMemoryWarning()
 * @method void SDL_OnApplicationWillResignActive()
 * @method void SDL_OnApplicationDidEnterBackground()
 * @method void SDL_OnApplicationWillEnterForeground()
 * @method void SDL_OnApplicationDidBecomeActive()
 * @method int SDL_GetTicks()
 * @method int SDL_GetTicks64()
 * @method int SDL_GetPerformanceCounter()
 * @method int SDL_GetPerformanceFrequency()
 * @method void SDL_Delay(int $ms)
 * @method int SDL_AddTimer(int $interval, callable $callback, CData $param)
 * @method int SDL_RemoveTimer(int $id)
 * @method void SDL_GetVersion(CData $ver)
 * @method string SDL_GetRevision()
 * @method int SDL_GetRevisionNumber()
 * @method CData SDL_GetPreferredLocales()
 * @method int SDL_OpenURL(string $url)
 * @method int SDL_Init(int $flags)
 * @method int SDL_InitSubSystem(int $flags)
 * @method void SDL_QuitSubSystem(int $flags)
 * @method int SDL_WasInit(int $flags)
 * @method void SDL_Quit()
 */
final class SDL2
{
    public function __construct(
        ?string $binary = null,
        ?string $version = null,
        bool $init = false,
        public readonly ?Platform $platform = null,
        private readonly ?CacheInterface $cache = null,
    ) {
    }
}
